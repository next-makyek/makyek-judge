{"version":3,"sources":["judge.js"],"names":["config","JSON","readFile","toString","argvConfig","parse","log","message","shutdown","EXIT_ERROR","MSG_CAUSED_BY_SYS","BRAIN_IDS","id","brainsConfig","field","translateField","getOppositeField","forEach","bin","undefined","accessSync","constants","X_OK","err","core","parseInt","isNaN","moveTimeout","DEFAULT_MOVE_TIMEOUT","roundTimeout","DEFAULT_ROUND_TIMEOUT","memoryLimit","DEFAULT_MEMORY_LIMIT","roundConfig","size","DEFAULT_BOARD_SIZE","action","board","brain","sandbox","affinity","maxMemory","maxTime","on","handleBrainError","handleBrainExit","code","brains","hasShutdown","all","map","emitErrorOnException","waitForOneResponse","DEFAULT_START_TIMEOUT","writeInstruction","resp","UserError","lastPlacement","ended","currentBrainId","getCurrentBrain","anotherBrain","m","match","placement","place","row","col","state","BOARD_STATE_DRAW","EXIT_DRAW","BOARD_STATE_WIN_BLACK","FIELD_BLACK","EXIT_B0_WIN","EXIT_B1_WIN","BOARD_STATE_WIN_WHITE","FIELD_WHITE","Error","ignoreAllEvents","main","nextField","exitCode","causedBy","kill","summary","summaryData","elapsedRoundTime","mapValues","exitCausedBy","currentBoard","getBoardMap","boardOrder","getOrderMap","data","writeFileSync","process","exit","type","error","getCodeForBrainLose","catch","e","stack"],"mappings":"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","file":"judge.js","sourcesContent":["import fs from 'fs';\nimport _ from 'lodash';\nimport fsp from 'fs-promise';\nimport {argv} from 'yargs';\n\nimport utils from './libs/utils';\nimport Brain from './libs/brain';\nimport Board from './libs/board';\nimport errors from './libs/errors';\nimport exitCode from './libs/exitCode';\n\nconst MSG_CAUSED_BY_SYS = 'Judge system internal error';\n\nconst DEFAULT_BOARD_SIZE = 16;\nconst DEFAULT_START_TIMEOUT = 5000;\nconst DEFAULT_MOVE_TIMEOUT = 5000;\nconst DEFAULT_ROUND_TIMEOUT = 180000;\nconst DEFAULT_MEMORY_LIMIT = 350 * 1024 * 1024;\n\nconst BRAIN_IDS = ['0', '1'];\n\nconst roundConfig = {};\nconst brains = {};\nconst brainsConfig = {};\n\nlet board = null;\nlet argvConfig = {};\nlet hasShutdown = false;\n\nfunction getCurrentBrain() {\n  return brains[0].config.field === board.nextField ? 0 : 1;\n}\n\nfunction shutdown(exitCode, causedBy) {\n  utils.log('debug', {action: 'shutdown', exitCode, causedBy});\n  _.forEach(brains, brain => {\n    brain.ignoreAllEvents = true;\n    brain.kill();\n  });\n\n  if (argvConfig && argvConfig.summary) {\n    const summaryData = {\n      elapsedRoundTime: _.mapValues(brains, 'usedTime'),\n      exitCausedBy: causedBy,\n      currentBoard: board ? board.getBoardMap() : null,\n      boardOrder: board ? board.getOrderMap() : null,\n      roundConfig,\n    };\n    utils.log('info', {action: 'summary', data: summaryData});\n    fs.writeFileSync(argvConfig.summary, JSON.stringify(summaryData));\n  }\n\n  hasShutdown = true;\n  process.exit(exitCode);\n}\n\nfunction handleBrainError(id, err) {\n  utils.log('info', {type: 'brainError', error: err.message, id});\n  shutdown(exitCode.getCodeForBrainLose(id), `Brain ${id} error: ${err.message}`);\n}\n\nfunction handleBrainExit(id) {\n  utils.log('info', {type: 'brainProcessExit', id});\n  shutdown(exitCode.getCodeForBrainLose(id), `Brain ${id} process terminated`);\n}\n\nasync function main() {\n  if (argv.config) {\n    try {\n      argvConfig = JSON.parse((await fsp.readFile(argv.config)).toString());\n    } catch (err) {\n      utils.log('error', {message: `Failed to parse config from \"argv.config\": ${err.message}`});\n      shutdown(exitCode.EXIT_ERROR, MSG_CAUSED_BY_SYS);\n      return;\n    }\n  } else {\n    argvConfig = argv;\n  }\n  for (const id of BRAIN_IDS) {\n    brainsConfig[id] = {};\n  }\n  brainsConfig[0].field = argvConfig['brain0.field'];\n  if (brainsConfig[0].field !== 'black' && brainsConfig[0].field !== 'white') {\n    utils.log('error', {message: `Invalid argument \"brain0.field\", expecting \"black\" or \"white\", but received ${brainsConfig[0].field}`});\n    shutdown(exitCode.EXIT_ERROR, MSG_CAUSED_BY_SYS);\n    return;\n  }\n  // Translate text to constant\n  brainsConfig[0].field = Board.translateField(brainsConfig[0].field);\n  brainsConfig[1].field = Board.getOppositeField(brainsConfig[0].field);\n\n  _.forEach(brainsConfig, (config, id) => {\n    config.bin = argvConfig[`brain${id}.bin`];\n    if (config.bin === undefined) {\n      utils.log('error', {message: `Missing argument \"brain${id}.bin\"`});\n      shutdown(exitCode.EXIT_ERROR, MSG_CAUSED_BY_SYS);\n      return;\n    }\n    try {\n      fsp.accessSync(config.bin, fsp.constants.X_OK);\n    } catch (err) {\n      utils.log('error', {message: `Unable to access \"${config.bin}\"`});\n      shutdown(exitCode.EXIT_ERROR, MSG_CAUSED_BY_SYS);\n      return;\n    }\n    config.core = parseInt(argvConfig[`brain${id}.core`], 10);\n    if (isNaN(config.core)) {\n      config.core = false;\n    }\n    config.moveTimeout = parseInt(argvConfig[`brain${id}.moveTimeout`], 10);\n    if (isNaN(config.moveTimeout)) {\n      config.moveTimeout = DEFAULT_MOVE_TIMEOUT;\n    }\n    config.roundTimeout = parseInt(argvConfig[`brain${id}.roundTimeout`], 10);\n    if (isNaN(config.roundTimeout)) {\n      config.roundTimeout = DEFAULT_ROUND_TIMEOUT;\n    }\n    config.memoryLimit = parseInt(argvConfig[`brain${id}.memoryLimit`], 10);\n    if (isNaN(config.memoryLimit)) {\n      config.memoryLimit = DEFAULT_MEMORY_LIMIT;\n    }\n  });\n\n  roundConfig.size = parseInt(argvConfig['round.size'], 10);\n  if (isNaN(roundConfig.size)) {\n    roundConfig.size = DEFAULT_BOARD_SIZE;\n  }\n\n  utils.log('debug', {action: 'initialize', roundConfig, brainsConfig});\n\n  board = new Board(roundConfig.size, roundConfig.size);\n\n  // Spawn brain processes\n  _.forEach(brainsConfig, (config, id) => {\n    const brain = new Brain(id, {\n      bin: config.bin,\n      sandbox: argvConfig.sandbox,\n      affinity: config.core,\n      maxMemory: config.memoryLimit,\n      maxTime: config.roundTimeout,\n    });\n    brain.on('error', err => handleBrainError(id, err));\n    brain.on('exit', code => handleBrainExit(id, code));\n    brain.config = config;\n    brains[id] = brain;\n  });\n\n  if (hasShutdown) {\n    return;\n  }\n\n  // Send START to both side\n  try {\n    await Promise.all(_.map(brains, brain => brain.emitErrorOnException(async () => {\n      const resp = await brain.waitForOneResponse(DEFAULT_START_TIMEOUT, () => {\n        brain.writeInstruction(`START ${brain.config.field}`);\n      });\n      if (resp !== 'OK') {\n        throw new errors.UserError(`Expect \"OK\", but received \"${resp}\"`);\n      }\n    })));\n  } catch (err) {\n    if (err instanceof errors.UserError) {\n      return;\n    }\n    throw err;\n  }\n\n  // Send BEGIN or TURN\n  let lastPlacement = null;\n  while (!hasShutdown && (lastPlacement === null || lastPlacement.ended === false)) {\n    try {\n      const currentBrainId = getCurrentBrain();\n      const brain = brains[currentBrainId];\n      const anotherBrain = brains[1 - currentBrainId];\n      await brain.emitErrorOnException(async () => {\n        const resp = await brain.waitForOneResponse(brain.config.moveTimeout, () => {\n          brain.writeInstruction('TURN');\n        });\n        const m = resp.match(/^(-?\\d+) (-?\\d+)$/);\n        if (!m) {\n          throw new errors.UserError(`Invalid response. Expect a placement format as \"[X] [Y]\".`);\n        }\n        const placement = board.place(parseInt(m[1], 10), parseInt(m[2], 10));\n        lastPlacement = placement;\n        anotherBrain.writeInstruction(`PLACE ${placement.row} ${placement.col}`);\n      });\n    } catch (err) {\n      if (err instanceof errors.UserError) {\n        return;\n      }\n      throw err;\n    }\n  }\n\n  // Round ended\n  let code;\n  if (board.state === Board.BOARD_STATE_DRAW) {\n    code = exitCode.EXIT_DRAW;\n  } else if (board.state === Board.BOARD_STATE_WIN_BLACK) {\n    if (brains[0].config.field === Board.FIELD_BLACK) {\n      code = exitCode.EXIT_B0_WIN;\n    } else {\n      code = exitCode.EXIT_B1_WIN;\n    }\n  } else if (board.state === Board.BOARD_STATE_WIN_WHITE) {\n    if (brains[0].config.field === Board.FIELD_WHITE) {\n      code = exitCode.EXIT_B0_WIN;\n    } else {\n      code = exitCode.EXIT_B1_WIN;\n    }\n  } else {\n    throw new Error(`Invalid board state ${board.state}`);\n  }\n\n  _.forEach(brain => brain.ignoreAllEvents = true);\n  shutdown(code, '(normal round exit)');\n}\n\nmain()\n  .catch(e => {\n    utils.log('error', {message: `Uncaught system exception: ${e.stack}`});\n    shutdown(exitCode.EXIT_ERROR, MSG_CAUSED_BY_SYS);\n  });\n"]}