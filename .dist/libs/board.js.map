{"version":3,"sources":["libs/board.js"],"names":["Board","fieldText","FIELD_BLACK","FIELD_WHITE","field","size","roundLimit","log","action","roundsCount","clear","board","nextField","state","BOARD_STATE_GOING","getBoardMap","newState","x","y","option","inBound","UserError","oppoField","getOppositeField","canPlaceAt","placeAt","position","ended","hasAvailablePlacement","BOARD_STATE_WIN_BLACK","BOARD_STATE_WIN_WHITE","info","causedBy","analytics","count","BOARD_STATE_DRAW","FIELD_BLANK","STATE_EMPTY","STATE_BLACK","STATE_WHITE"],"mappings":"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","file":"board.js","sourcesContent":["import assert from 'assert';\n\n\nimport makyek from 'libreversi';\nimport errors from './errors';\nimport utils from './utils';\n\nexport default class Board {\n  static translateField(fieldText) {\n    assert(fieldText === 'black' || fieldText === 'white');\n    if (fieldText === 'black') {\n      return Board.FIELD_BLACK;\n    } else if (fieldText === 'white') {\n      return Board.FIELD_WHITE;\n    }\n  }\n\n  static getOppositeField(field) {\n    assert(field === Board.FIELD_BLACK || field === Board.FIELD_WHITE);\n    if (field === Board.FIELD_BLACK) {\n      return Board.FIELD_WHITE;\n    } else if (field === Board.FIELD_WHITE) {\n      return Board.FIELD_BLACK;\n    }\n  }\n\n  constructor(size, roundLimit) {\n    assert(size > 0);\n    utils.log('debug', {action: 'createBoard', size});\n    this.size = size;\n    this.roundLimit = roundLimit;\n    this.roundsCount = 0;\n    this.clear();\n  }\n\n  clear() {\n    this.board = new makyek.Board(this.size);\n    this.nextField = Board.FIELD_BLACK;\n    this.state = Board.BOARD_STATE_GOING;\n    utils.log('debug', {action: 'clearBoard', board: this.getBoardMap(), nextField: this.nextField, newState: this.state});\n  }\n\n  getBoardMap() {\n    return this.board.board;\n  }\n\n  place(x, y, option) {\n    assert(this.state === Board.BOARD_STATE_GOING);\n    if (!this.board.inBound(x, y)) {\n      throw new errors.UserError(`Invalid placement: Position out of board.`);\n    }\n    if (this.getBoardMap()[x][y] !== this.nextField) {\n      throw new errors.UserError(`Invalid placement: The position (${x}, ${y}) is not your stone.`);\n    }\n\n    const field = this.nextField;\n    const oppoField = Board.getOppositeField(field);\n\n    if (!this.board.canPlaceAt(field, x, y, option)) {\n      throw new errors.UserError(`Invalid placement: Cannot put at stone at position (${x}, ${y}).`);\n    }\n\n    this.board.placeAt(field, x, y, option);\n    utils.log('debug', {action: 'place', position: [x, y], option, field});\n\n    this.roundsCount++;\n    let ended = false;\n    if (!this.board.hasAvailablePlacement(oppoField)) {\n      ended = true;\n      if (this.nextField === Board.FIELD_BLACK) {\n        this.state = Board.BOARD_STATE_WIN_BLACK;\n      } else {\n        this.state = Board.BOARD_STATE_WIN_WHITE;\n      }\n\n      const info = {\n        action: 'roundEnd',\n        board: this.getBoardMap(),\n        causedBy: 'hasAvailablePlacement'\n      };\n      utils.log('debug', info);\n    } else if (this.roundsCount > this.roundLimit) {\n      ended = true;\n      const analytics = this.board.count();\n      if (analytics[Board.FIELD_BLACK] > analytics[Board.FIELD_WHITE]) {\n        this.state = Board.BOARD_STATE_WIN_BLACK;\n      } else if (analytics[Board.FIELD_BLACK] < analytics[Board.FIELD_WHITE]) {\n        this.state = Board.BOARD_STATE_WIN_WHITE;\n      } else {\n        this.state = Board.BOARD_STATE_DRAW;\n      }\n\n      const info = {\n        action: 'roundEnd',\n        causedBy: 'roundLimit',\n        'roundsCount': this.roundsCount,\n        'roundLimit': this.roundLimit,\n        analytics,\n        board: this.getBoardMap()\n      };\n      utils.log('debug', info);\n    }\n\n    this.nextField = oppoField;\n\n    // console.log(`field: ${field}, round: ${this.roundsCount}`);\n    // for (let i = 0; i < this.size; i++) {\n    //   let str = '';\n    //   for (let j = 0; j < this.size; j++) {\n    //     if (this.getBoardMap()[i][j] === Board.FIELD_BLACK) {\n    //       str += 'O';\n    //     } else if (this.getBoardMap()[i][j] === Board.FIELD_WHITE) {\n    //       str += 'X';\n    //     } else if (this.getBoardMap()[i][j] === Board.FIELD_BLANK) {\n    //       str += '.';\n    //     }\n    //   }\n    //   console.log(str);\n    // }\n\n    return {x, y, option, ended};\n  }\n}\n\nBoard.FIELD_BLANK = makyek.STATE_EMPTY;\nBoard.FIELD_BLACK = makyek.STATE_BLACK;\nBoard.FIELD_WHITE = makyek.STATE_WHITE;\n\nBoard.BOARD_STATE_GOING = 0;\nBoard.BOARD_STATE_WIN_BLACK = 1;\nBoard.BOARD_STATE_WIN_WHITE = 2;\nBoard.BOARD_STATE_DRAW = 3;\n"]}