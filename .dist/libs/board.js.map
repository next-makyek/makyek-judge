{"version":3,"sources":["libs/board.js"],"names":["Board","fieldText","FIELD_BLACK","FIELD_WHITE","field","size","roundLimit","log","action","roundsCount","steps","clear","board","nextField","state","BOARD_STATE_GOING","getBoardMap","newState","x","y","option","push","inBound","UserError","OPTION_UP","OPTION_DOWN","OPTION_LEFT","OPTION_RIGHT","OPTION_UP_LEFT","OPTION_UP_RIGHT","OPTION_DOWN_LEFT","OPTION_DOWN_RIGHT","oppoField","getOppositeField","canPlaceAt","placeAt","position","ended","hasAvailablePlacement","BOARD_STATE_WIN_BLACK","BOARD_STATE_WIN_WHITE","info","causedBy","analytics","count","BOARD_STATE_DRAW","FIELD_BLANK","STATE_EMPTY","STATE_BLACK","STATE_WHITE"],"mappings":"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","file":"board.js","sourcesContent":["import assert from 'assert';\n\n\nimport makyek from 'libreversi';\nimport errors from './errors';\nimport utils from './utils';\n\nexport default class Board {\n  static translateField(fieldText) {\n    assert(fieldText === 'black' || fieldText === 'white');\n    if (fieldText === 'black') {\n      return Board.FIELD_BLACK;\n    } else if (fieldText === 'white') {\n      return Board.FIELD_WHITE;\n    }\n  }\n\n  static getOppositeField(field) {\n    assert(field === Board.FIELD_BLACK || field === Board.FIELD_WHITE);\n    if (field === Board.FIELD_BLACK) {\n      return Board.FIELD_WHITE;\n    } else if (field === Board.FIELD_WHITE) {\n      return Board.FIELD_BLACK;\n    }\n  }\n\n  constructor(size, roundLimit) {\n    assert(size > 0);\n    utils.log('debug', {action: 'createBoard', size});\n    this.size = size;\n    this.roundLimit = roundLimit;\n    this.roundsCount = 0;\n    this.steps = [];\n    this.clear();\n  }\n\n  clear() {\n    this.board = new makyek.Board();\n    this.nextField = Board.FIELD_BLACK;\n    this.state = Board.BOARD_STATE_GOING;\n    utils.log('debug', {action: 'clearBoard', board: this.getBoardMap(), nextField: this.nextField, newState: this.state});\n  }\n\n  getBoardMap() {\n    return this.board.board;\n  }\n\n  getSteps() {\n    return this.steps;\n  }\n\n  place(x, y, option) {\n    this.steps.push([this.nextField, x, y, option]);\n    assert(this.state === Board.BOARD_STATE_GOING);\n    if (!this.board.inBound(x, y)) {\n      throw new errors.UserError(`Invalid placement: The position (${x}, ${y}) out of board.`);\n    }\n    if (this.getBoardMap()[x][y] !== this.nextField) {\n      throw new errors.UserError(`Invalid placement: The position (${x}, ${y}) is not your stone.`);\n    }\n\n    if (option !== makyek.OPTION_UP && option !== makyek.OPTION_DOWN\n      && option !== makyek.OPTION_LEFT && option !== makyek.OPTION_RIGHT\n      && option !== makyek.OPTION_UP_LEFT && option !== makyek.OPTION_UP_RIGHT\n      && option !== makyek.OPTION_DOWN_LEFT && option !== makyek.OPTION_DOWN_RIGHT) {\n      throw new errors.UserError(`Invalid option: The option ${option} is not a valid option.`);\n    }\n\n    const field = this.nextField;\n    const oppoField = Board.getOppositeField(field);\n\n    if (!this.board.canPlaceAt(field, x, y, option)) {\n      throw new errors.UserError(`Invalid placement: Cannot move stone at position (${x}, ${y}) with option ${option}.`);\n    }\n\n    this.board.placeAt(field, x, y, option);\n    utils.log('debug', {action: 'place', position: [x, y], option, field});\n\n    this.roundsCount++;\n    let ended = false;\n    if (!this.board.hasAvailablePlacement(oppoField)) {\n      ended = true;\n      if (this.nextField === Board.FIELD_BLACK) {\n        this.state = Board.BOARD_STATE_WIN_BLACK;\n      } else {\n        this.state = Board.BOARD_STATE_WIN_WHITE;\n      }\n\n      const info = {\n        action: 'roundEnd',\n        board: this.getBoardMap(),\n        causedBy: 'hasAvailablePlacement'\n      };\n      utils.log('debug', info);\n    } else if (this.roundsCount >= this.roundLimit) {\n      ended = true;\n      const analytics = this.board.count();\n      if (analytics[Board.FIELD_BLACK] > analytics[Board.FIELD_WHITE]) {\n        this.state = Board.BOARD_STATE_WIN_BLACK;\n      } else if (analytics[Board.FIELD_BLACK] < analytics[Board.FIELD_WHITE]) {\n        this.state = Board.BOARD_STATE_WIN_WHITE;\n      } else {\n        this.state = Board.BOARD_STATE_DRAW;\n      }\n\n      const info = {\n        action: 'roundEnd',\n        causedBy: 'roundLimit',\n        'roundsCount': this.roundsCount,\n        'roundLimit': this.roundLimit,\n        analytics,\n        board: this.getBoardMap()\n      };\n      utils.log('debug', info);\n    }\n\n    this.nextField = oppoField;\n\n    // console.log(`field: ${field}, round: ${this.roundsCount}`);\n    // for (let i = 0; i < this.size; i++) {\n    //   let str = '';\n    //   for (let j = 0; j < this.size; j++) {\n    //     if (this.getBoardMap()[i][j] === Board.FIELD_BLACK) {\n    //       str += 'O';\n    //     } else if (this.getBoardMap()[i][j] === Board.FIELD_WHITE) {\n    //       str += 'X';\n    //     } else if (this.getBoardMap()[i][j] === Board.FIELD_BLANK) {\n    //       str += '.';\n    //     }\n    //   }\n    //   console.log(str);\n    // }\n\n    return {x, y, option, ended};\n  }\n}\n\nBoard.FIELD_BLANK = makyek.STATE_EMPTY;\nBoard.FIELD_BLACK = makyek.STATE_BLACK;\nBoard.FIELD_WHITE = makyek.STATE_WHITE;\n\nBoard.BOARD_STATE_GOING = 0;\nBoard.BOARD_STATE_WIN_BLACK = 1;\nBoard.BOARD_STATE_WIN_WHITE = 2;\nBoard.BOARD_STATE_DRAW = 3;\n"]}