{"version":3,"sources":["libs/board.js"],"names":["Board","fieldText","FIELD_BLACK","FIELD_WHITE","field","size","roundLimit","log","action","roundsCount","steps","clear","board","nextField","state","BOARD_STATE_GOING","getBoardMap","newState","arr","outarr","len","length","i","Array","j","currentBoard","maxDepth","tempBoard","deepcopyArr","tempDepth","searchJumpTimes","x","y","depth","oppoF","getOppositeField","direction","curMaxDepth","k","newNeiborX","newNeiborY","newTargetX","newTargetY","inBound","temp","order","stepNum","oppoField","maxJumpTimes","getMaxJumpTimes","loseFlag","ended","console","BOARD_STATE_WIN_WHITE","BOARD_STATE_WIN_BLACK","curX","curY","nextX","nextY","Math","abs","canPlaceAt","tempBd","neiborX","neiborY","UserError","placeAt","push","position","join","analytics","count","BOARD_STATE_DRAW","info","causedBy","option","OPTION_UP","OPTION_DOWN","OPTION_LEFT","OPTION_RIGHT","OPTION_UP_LEFT","OPTION_UP_RIGHT","OPTION_DOWN_LEFT","OPTION_DOWN_RIGHT","hasAvailablePlacement","FIELD_BLANK","STATE_EMPTY","STATE_BLACK","STATE_WHITE"],"mappings":"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","file":"board.js","sourcesContent":["import assert from 'assert';\n\n\nimport makyek from 'libreversi';\nimport errors from './errors';\nimport utils from './utils';\n\nexport default class Board {\n  static translateField(fieldText) {\n    assert(fieldText === 'black' || fieldText === 'white');\n    if (fieldText === 'black') {\n      return Board.FIELD_BLACK;\n    } else if (fieldText === 'white') {\n      return Board.FIELD_WHITE;\n    }\n  }\n\n  static getOppositeField(field) {\n    assert(field === Board.FIELD_BLACK || field === Board.FIELD_WHITE);\n    if (field === Board.FIELD_BLACK) {\n      return Board.FIELD_WHITE;\n    } else if (field === Board.FIELD_WHITE) {\n      return Board.FIELD_BLACK;\n    }\n  }\n\n  constructor(size, roundLimit) {\n    assert(size > 0);\n    utils.log('debug', {action: 'createBoard', size});\n    this.size = size;\n    this.roundLimit = roundLimit;\n    this.roundsCount = 0;\n    this.steps = [];\n    this.clear();\n  }\n\n  clear() {\n    this.board = new makyek.Board();\n    this.nextField = Board.FIELD_BLACK;\n    this.state = Board.BOARD_STATE_GOING;\n    utils.log('debug', {action: 'clearBoard', board: this.getBoardMap(), nextField: this.nextField, newState: this.state});\n  }\n\n  getBoardMap() {\n    return this.board.board;\n  }\n\n  getSteps() {\n    return this.steps;\n  }\n\n  deepcopyArr(arr) {\n    var outarr = [],len = arr.length;\n    for (var i=0; i < len; i++) {\n         outarr[i]=new Array();\n         for(var j=0;j<arr[i].length;j++){\n            outarr[i][j]=arr[i][j];\n         }\n    }\n    return outarr;\n  }\n\n  getMaxJumpTimes(field){\n    var currentBoard = this.getBoardMap()\n    let maxDepth = 0;\n    for(let i = 0; i < 8; ++i){\n        for (let j = 0; j < 8; ++j){\n          if (currentBoard[i][j] === field || currentBoard[i][j] ===  (field + 3) ){\n              var tempBoard = this.deepcopyArr(currentBoard) \n              //console.log('dfs for', i, j)\n              let tempDepth = this.searchJumpTimes(i, j, 0, tempBoard,field);\n              //console.log('dfs searchjump out')\n              //console.log('tempdepth and maxdepth',tempDepth,maxDepth)\n              if (tempDepth > maxDepth){\n                //console.log('compare jump out')\n                maxDepth = tempDepth\n              }\n          }\n          //console.log('i,j', i,j)\n        }\n    }\n    //console.log('return maxdepth', maxDepth)\n    return maxDepth\n  }\n\n  searchJumpTimes(x, y, depth, tempBoard, field){\n    //console.log('x, y, depth', x, y, depth)\n    const oppoF = Board.getOppositeField(field)\n    \n    var direction = [[-1, -1], [-1, 1], [1, -1], [1, 1]];\n    var curMaxDepth = depth\n    for (let k = 0; k < 4; ++k){\n      let newNeiborX = x + direction[k][0];\n      let newNeiborY = y + direction[k][1];\n      let newTargetX = newNeiborX + direction[k][0];\n      let newTargetY = newNeiborY + direction[k][1];\n      //console.log('tempboard', tempBoard)\n      //console.log('newNeiborx,y', newNeiborX,newNeiborY)\n      if (this.board.inBound(newTargetX,newTargetY)&&(tempBoard[newNeiborX][newNeiborY] === oppoF || tempBoard[newNeiborX][newNeiborY] === oppoF+3) && tempBoard[newTargetX][newTargetY] === 0){\n        //console.log('tempboard', tempBoard)\n        //console.log('dfs x y newNeiborx,y targetx y',x, y, newNeiborX,newNeiborY, newTargetX, newTargetY)\n        tempBoard[newTargetX][newTargetY] = field\n        tempBoard[x][y] = 0\n        tempBoard[newNeiborX][newNeiborY] = 0\n        let temp = this.searchJumpTimes(newTargetX, newTargetY, depth + 1, tempBoard, field)\n        if (temp > curMaxDepth){\n          curMaxDepth = temp\n        }\n        tempBoard[x][y] = field\n        tempBoard[newTargetX][newTargetY] = 0\n        tempBoard[newNeiborX][newNeiborY] = oppoF\n      }\n    }\n    depth = curMaxDepth\n    \n    return depth\n  }\n\n  place(order) {\n\n    var stepNum = order[0] - 1\n    //console.log('order[0]', order[0])\n    //console.log('order[1]', order[1])\n    //console.log('order[2]', order[2])\n  \n    //this.steps.push([this.nextField, x, y, option]);\n    const field = this.nextField;\n    \n    const oppoField = Board.getOppositeField(field)\n    var maxJumpTimes = this.getMaxJumpTimes(field)\n\n    //console.log('maxJumpTimes', maxJumpTimes)\n    //console.log('stepNum', stepNum)\n    var loseFlag = 0\n    let ended = false;\n    if (stepNum !== order.length - 2 || stepNum === 0){\n      console.log('out point 1')\n      loseFlag = 1\n      ended = true\n      if (this.nextField === Board.FIELD_BLACK) {\n        this.state = Board.BOARD_STATE_WIN_WHITE;\n      } else {\n        this.state = Board.BOARD_STATE_WIN_BLACK;\n      }\n      return {ended};\n    }\n    if (0 < maxJumpTimes && maxJumpTimes != stepNum || maxJumpTimes === 0 && stepNum != 1){\n      loseFlag = 1\n      console.log('out point 3')\n    }else if(maxJumpTimes === 0 && stepNum === 1){\n      var curX = order[1][0] - '0'\n      var curY = order[1][2] - '0'\n      var nextX = order[2][0] - '0'\n      var nextY = order[2][2] - '0'\n      console.log('out point 4')\n      if(!(this.board.inBound(nextX, nextY) && Math.abs(curX - nextX) == 1 && Math.abs(curY - nextY) == 1 && this.board.canPlaceAt(field, curX, curY, nextX, nextY) )){\n        loseFlag = 1\n        console.log('out point 5')\n      }\n    }else {\n      var tempBd = this.deepcopyArr(this.getBoardMap()) \n      \n      //console.log('after dfs', tempBd)\n      for (let i = 1; i <= stepNum; ++i){\n        //console.log('out point 6')\n        assert(this.state === Board.BOARD_STATE_GOING);\n        var curX = order[i][0] - '0'\n        var curY = order[i][2] - '0'\n        var nextX = order[i+1][0] - '0'\n        var nextY = order[i+1][2] - '0'\n        var neiborX = (curX + nextX)/2\n        var neiborY = (curY + nextY)/2\n        if (!(this.board.inBound(curX, curY) && this.board.inBound(nextX, nextY))) {\n          loseFlag = 1\n          this.board.board = tempBd\n          throw new errors.UserError(`Invalid placement: The position () out of board.`);\n        }\n        if (!( Math.abs(curX - nextX) == 2 &&  Math.abs(curY - nextY) == 2)) {\n          loseFlag = 1\n          this.board.board = tempBd\n          throw new errors.UserError(`Invalid placement: This is not a jump.`);\n        }\n        //if (!(this.getBoardMap()[neiborX][neiborY] === oppoField && this.getBoardMap()[nextX][nextY] === 0)) {\n        //  loseFlag = 1\n        //  this.board.board = tempBd\n        //  throw new errors.UserError(`Invalid placement: Invalid jump.`);\n        //}\n        if (!this.board.canPlaceAt(field, curX, curY, nextX, nextY)) {\n          loseFlag = 1\n          this.board.board = tempBd\n          throw new errors.UserError(`Invalid placement: Cannot move.`);\n        }\n        this.board.placeAt(field, curX, curY, nextX, nextY, false)\n        //if (this.getBoardMap()[curX][curY] !== this.nextField) {\n          //loseFlag = 1\n          //throw new errors.UserError(`Invalid placement: The position (${curX}, ${curY}) is not your stone.`);\n        //}\n      //if (!this.board.canPlaceAt(field, curX, curY, nextX, nextY)) {\n        //loseFlag = 1\n        //throw new errors.UserError(`Invalid placement: Cannot move stone at position (${nextX}, ${nextY}).`);\n      //}\n      // this.board.placeAt(field, curX, curY, nextX, nextY);\n      //utils.log('debug', {action: 'place', position: [x, y], option, field});    \n      }\n      //console.log('tempBd', tempBd)\n      this.board.board = tempBd\n      //console.log('board', this.getBoardMap(), this.board.board)\n    }\n    this.roundsCount++;\n    console.log('out point 7')\n    if (loseFlag === 0) {\n      console.log('out point 8')\n      //console.log('board before')\n      //console.log(this.getBoardMap())\n      for (let i = 1; i < stepNum; ++i){\n        //console.log('out point 9')\n        var curX = order[i][0] - '0'\n        var curY = order[i][2] - '0'\n        var nextX = order[i+1][0] - '0'\n        var nextY = order[i+1][2] - '0'\n        this.board.placeAt(field, curX, curY, nextX, nextY,false)\n        this.steps.push([this.nextField, curX, curY, nextX, nextY, 0]);\n        //console.log('board here')\n        //console.log(this.getBoardMap())\n      }\n      var curX = order[stepNum][0] - '0'\n      var curY = order[stepNum][2] - '0'\n      var nextX = order[stepNum+1][0] - '0'\n      var nextY = order[stepNum+1][2] - '0'\n      this.board.placeAt(field, curX, curY, nextX, nextY,true)\n      this.steps.push([this.nextField, curX, curY, nextX, nextY, 0]);\n\n      utils.log('debug', {action: 'place', field: field, position: order.join(' ')});\n      // if (!this.board.hasAvailablePlacement(oppoField)) {\n      //   console.log('out point 10')\n      //   ended = true;\n      //   if (this.nextField === Board.FIELD_BLACK) {\n      //     this.state = Board.BOARD_STATE_WIN_BLACK;\n      //   } else {\n      //     this.state = Board.BOARD_STATE_WIN_WHITE;\n      //   }\n  \n      //   const info = {\n      //     action: 'roundEnd',\n\n      //     board: this.getBoardMap(),\n      //     causedBy: 'hasAvailablePlacement'\n      //   };\n      //   utils.log('debug', info);\n      // } else \n      if (this.roundsCount >= this.roundLimit) {\n        console.log('out point 11')\n        ended = true;\n        const analytics = this.board.count();\n        if (analytics[Board.FIELD_BLACK] > analytics[Board.FIELD_WHITE]) {\n          this.state = Board.BOARD_STATE_WIN_BLACK;\n        } else if (analytics[Board.FIELD_BLACK] < analytics[Board.FIELD_WHITE]) {\n          this.state = Board.BOARD_STATE_WIN_WHITE;\n        } else {\n          this.state = Board.BOARD_STATE_DRAW;\n        }\n  \n        const info = {\n          action: 'roundEnd',\n          causedBy: 'roundLimit',\n          'roundsCount': this.roundsCount,\n          'roundLimit': this.roundLimit,\n          analytics,\n          board: this.getBoardMap()\n        };\n        utils.log('debug', info);\n      }\n    } else{\n      console.log('out point 12')\n      ended = true\n      if (this.nextField === Board.FIELD_BLACK) {\n        this.state = Board.BOARD_STATE_WIN_WHITE;\n      } else {\n        this.state = Board.BOARD_STATE_WIN_BLACK;\n      }\n    }\n    \n    this.nextField = oppoField;\n\n    return {ended};\n  }\n\n  place1(order) {\n    this.steps.push([this.nextField, x, y, option]);\n    assert(this.state === Board.BOARD_STATE_GOING);\n    if (!this.board.inBound(x, y)) {\n      throw new errors.UserError(`Invalid placement: The position (${x}, ${y}) out of board.`);\n    }\n    if (this.getBoardMap()[x][y] !== this.nextField) {\n      throw new errors.UserError(`Invalid placement: The position (${x}, ${y}) is not your stone.`);\n    }\n\n    if (option !== makyek.OPTION_UP && option !== makyek.OPTION_DOWN\n      && option !== makyek.OPTION_LEFT && option !== makyek.OPTION_RIGHT\n      && option !== makyek.OPTION_UP_LEFT && option !== makyek.OPTION_UP_RIGHT\n      && option !== makyek.OPTION_DOWN_LEFT && option !== makyek.OPTION_DOWN_RIGHT) {\n      throw new errors.UserError(`Invalid option: The option ${option} is not a valid option.`);\n    }\n\n    const field = this.nextField;\n    const oppoField = Board.getOppositeField(field);\n\n    if (!this.board.canPlaceAt(field, x, y, option)) {\n      throw new errors.UserError(`Invalid placement: Cannot move stone at position (${x}, ${y}) with option ${option}.`);\n    }\n\n    this.board.placeAt(field, x, y, option);\n    utils.log('debug', {action: 'place', position: [x, y], option, field});\n\n    this.roundsCount++;\n    let ended = false;\n    if (!this.board.hasAvailablePlacement(oppoField)) {\n      ended = true;\n      if (this.nextField === Board.FIELD_BLACK) {\n        this.state = Board.BOARD_STATE_WIN_BLACK;\n      } else {\n        this.state = Board.BOARD_STATE_WIN_WHITE;\n      }\n\n      const info = {\n        action: 'roundEnd',\n        board: this.getBoardMap(),\n        causedBy: 'hasAvailablePlacement'\n      };\n      utils.log('debug', info);\n    } else if (this.roundsCount >= this.roundLimit) {\n      ended = true;\n      const analytics = this.board.count();\n      if (analytics[Board.FIELD_BLACK] > analytics[Board.FIELD_WHITE]) {\n        this.state = Board.BOARD_STATE_WIN_BLACK;\n      } else if (analytics[Board.FIELD_BLACK] < analytics[Board.FIELD_WHITE]) {\n        this.state = Board.BOARD_STATE_WIN_WHITE;\n      } else {\n        this.state = Board.BOARD_STATE_DRAW;\n      }\n\n      const info = {\n        action: 'roundEnd',\n        causedBy: 'roundLimit',\n        'roundsCount': this.roundsCount,\n        'roundLimit': this.roundLimit,\n        analytics,\n        board: this.getBoardMap()\n      };\n      utils.log('debug', info);\n    }\n\n    this.nextField = oppoField;\n\n    // console.log(`field: ${field}, round: ${this.roundsCount}`);\n    // for (let i = 0; i < this.size; i++) {\n    //   let str = '';\n    //   for (let j = 0; j < this.size; j++) {\n    //     if (this.getBoardMap()[i][j] === Board.FIELD_BLACK) {\n    //       str += 'O';\n    //     } else if (this.getBoardMap()[i][j] === Board.FIELD_WHITE) {\n    //       str += 'X';\n    //     } else if (this.getBoardMap()[i][j] === Board.FIELD_BLANK) {\n    //       str += '.';\n    //     }\n    //   }\n    //   console.log(str);\n    // }\n\n    return {x, y, option, ended};\n  }\n}\n\nBoard.FIELD_BLANK = makyek.STATE_EMPTY;\nBoard.FIELD_BLACK = makyek.STATE_BLACK;\nBoard.FIELD_WHITE = makyek.STATE_WHITE;\n\nBoard.BOARD_STATE_GOING = 0;\nBoard.BOARD_STATE_WIN_BLACK = 1;\nBoard.BOARD_STATE_WIN_WHITE = 2;\nBoard.BOARD_STATE_DRAW = 3;\n"]}