{"version":3,"sources":["libs/board.js"],"names":["Board","fieldText","FIELD_BLACK","FIELD_WHITE","field","size","log","action","clear","board","nextField","state","BOARD_STATE_GOING","getBoardMap","newState","order","row","col","UserError","FIELD_BLANK","oppoField","getOppositeField","canPlaceAt","placeAt","position","switchField","ended","hasAvailablePlacement","analytics","count","BOARD_STATE_WIN_BLACK","BOARD_STATE_WIN_WHITE","BOARD_STATE_DRAW","info","STATE_EMPTY","STATE_BLACK","STATE_WHITE"],"mappings":"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","file":"board.js","sourcesContent":["import assert from 'assert';\n\nimport reversi from 'libreversi';\nimport errors from './errors';\nimport utils from './utils';\n\nexport default class Board {\n  static translateField(fieldText) {\n    assert(fieldText === 'black' || fieldText === 'white');\n    if (fieldText === 'black') {\n      return Board.FIELD_BLACK;\n    } else if (fieldText === 'white') {\n      return Board.FIELD_WHITE;\n    }\n  }\n\n  static getOppositeField(field) {\n    assert(field === Board.FIELD_BLACK || field === Board.FIELD_WHITE);\n    if (field === Board.FIELD_BLACK) {\n      return Board.FIELD_WHITE;\n    } else if (field === Board.FIELD_WHITE) {\n      return Board.FIELD_BLACK;\n    }\n  }\n\n  constructor(size) {\n    assert(size > 0);\n    utils.log('debug', {action: 'createBoard', size});\n    this.size = size;\n    this.clear();\n  }\n\n  clear() {\n    this.board = new reversi.Board(this.size);\n    this.nextField = Board.FIELD_BLACK;\n    this.state = Board.BOARD_STATE_GOING;\n    utils.log('debug', {action: 'clearBoard', board: this.getBoardMap(), nextField: this.nextField, newState: this.state});\n  }\n\n  getBoardMap() {\n    return this.board.board;\n  }\n\n  getOrderMap() {\n    return this.board.order;\n  }\n\n  place(row, col) {\n    assert(this.state === Board.BOARD_STATE_GOING);\n    if (row < 0 || row >= this.size || col < 0 || col >= this.size) {\n      throw new errors.UserError(`Invalid placement: Position out of board.`);\n    }\n    if (this.getBoardMap()[row][col] !== Board.FIELD_BLANK) {\n      throw new errors.UserError(`Invalid placement: There is already a stone at position (${row}, ${col}).`);\n    }\n\n    const field = this.nextField;\n    const oppoField = Board.getOppositeField(field);\n\n    if (!this.board.canPlaceAt(field, row, col)) {\n      throw new errors.UserError(`Invalid placement: Cannot put at stone at position (${row}, ${col}).`);\n    }\n\n    this.board.placeAt(field, row, col);\n    utils.log('debug', {action: 'place', position: [row, col], field});\n\n    let switchField;\n    let ended;\n    if (this.board.hasAvailablePlacement(oppoField)) {\n      switchField = true;\n      ended = false;\n    } else if (this.board.hasAvailablePlacement(field)) {\n      switchField = false;\n      ended = false;\n    } else {\n      switchField = false;\n      ended = true;\n    }\n    if (switchField) {\n      this.nextField = oppoField;\n    }\n    if (ended) {\n      const analytics = this.board.count();\n      if (analytics[Board.FIELD_BLACK] > analytics[Board.FIELD_WHITE]) {\n        this.state = Board.BOARD_STATE_WIN_BLACK;\n      } else if (analytics[Board.FIELD_BLACK] < analytics[Board.FIELD_WHITE]) {\n        this.state = Board.BOARD_STATE_WIN_WHITE;\n      } else {\n        this.state = Board.BOARD_STATE_DRAW;\n      }\n      const info = {action: 'roundEnd', board: this.getBoardMap(), analytics};\n      utils.log('debug', info);\n    }\n\n    return {row, col, ended};\n  }\n}\n\nBoard.FIELD_BLANK = reversi.STATE_EMPTY;\nBoard.FIELD_BLACK = reversi.STATE_BLACK;\nBoard.FIELD_WHITE = reversi.STATE_WHITE;\n\nBoard.BOARD_STATE_GOING = 0;\nBoard.BOARD_STATE_WIN_BLACK = 1;\nBoard.BOARD_STATE_WIN_WHITE = 2;\nBoard.BOARD_STATE_DRAW = 3;\n"]}