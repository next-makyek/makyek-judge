{"version":3,"sources":["libs/utils.js"],"names":["utils","log","type","data","console","at","Date","now","spawnSandbox","command","args","sandboxBin","sandboxOptions","spawnCommand","spawnArgs","push","maxMemory","affinity","spawn","stdio","terminateProcess","child","stdout","destroy","stderr","process","platform","execSync","pid","kill","ignore"],"mappings":";;;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,QAAQ,EAAd;;AAEAA,MAAMC,GAAN,GAAY,UAACC,IAAD,EAAOC,IAAP,EAAgB;AAC1BC,UAAQH,GAAR,CAAY,yBAAe,EAAEI,IAAIC,KAAKC,GAAL,EAAN,EAAkBL,UAAlB,EAAwBC,UAAxB,EAAf,CAAZ;AACD,CAFD;;AAIAH,MAAMQ,YAAN,GAAqB,UAACC,OAAD,EAAUC,IAAV,EAAgBC,UAAhB,EAA4BC,cAA5B,EAA+C;AAClE,MAAIC,qBAAJ;AAAA,MAAkBC,kBAAlB;AACA,MAAIH,UAAJ,EAAgB;AAAA;;AACdE,mBAAeF,UAAf;AACAG,gBAAY,EAAZ;AACAA,cAAUC,IAAV,CAAe,eAAf;AACAD,cAAUC,IAAV,CAAe,aAAf;AACAD,cAAUC,IAAV,CAAe,kBAAf,EAAmC,CAAnC;AACAD,cAAUC,IAAV,CAAe,UAAf,EAA2BH,eAAeI,SAA1C;AACA,QAAIJ,eAAeK,QAAnB,EAA6B;AAC3BH,gBAAUC,IAAV,CAAe,YAAf,EAA6B,KAAMH,eAAeK,QAAf,GAA0B,CAA7D;AACD;AACD,6BAAUF,IAAV,oBAAeN,OAAf,0CAA2BC,IAA3B;AACD,GAXD,MAWO;AACLG,mBAAeJ,OAAf;AACAK,gBAAYJ,IAAZ;AACD;AACD,SAAO,wBAAcQ,KAAd,CAAoBL,YAApB,EAAkCC,SAAlC,EAA6C;AAClDK,WAAO;AAD2C,GAA7C,CAAP;AAGD,CApBD;;AAsBAnB,MAAMoB,gBAAN,GAAyB,UAACC,KAAD,EAAW;AAClC,MAAIA,MAAMC,MAAV,EAAkB;AAChBD,UAAMC,MAAN,CAAaC,OAAb;AACD;AACD,MAAIF,MAAMG,MAAV,EAAkB;AAChBH,UAAMG,MAAN,CAAaD,OAAb;AACD;AACD,MAAI;AACF,QAAIE,QAAQC,QAAR,KAAqB,OAAzB,EAAkC;AAChC;AACA,8BAAcC,QAAd,oBAAwCN,MAAMO,GAA9C;AACD,KAHD,MAGO;AACLP,YAAMQ,IAAN,CAAW,SAAX;AACD;AACF,GAPD,CAOE,OAAOC,MAAP,EAAe;AACf;AACD;AACF,CAjBD;;kBAmBe9B,K","file":"utils.js","sourcesContent":["import child_process from 'child_process';\n\nconst utils = {};\n\nutils.log = (type, data) => {\n  console.log(JSON.stringify({ at: Date.now(), type, data }));\n};\n\nutils.spawnSandbox = (command, args, sandboxBin, sandboxOptions) => {\n  let spawnCommand, spawnArgs;\n  if (sandboxBin) {\n    spawnCommand = sandboxBin;\n    spawnArgs = [];\n    spawnArgs.push('--use-desktop');\n    spawnArgs.push('--use-logon');\n    spawnArgs.push('--active-process', 1);\n    spawnArgs.push('--memory', sandboxOptions.maxMemory);\n    if (sandboxOptions.affinity) {\n      spawnArgs.push('--affinity', 1 << (sandboxOptions.affinity - 1));\n    }\n    spawnArgs.push(command, ...args);\n  } else {\n    spawnCommand = command;\n    spawnArgs = args;\n  }\n  return child_process.spawn(spawnCommand, spawnArgs, {\n    stdio: 'pipe',\n  });\n};\n\nutils.terminateProcess = (child) => {\n  if (child.stdout) {\n    child.stdout.destroy();\n  }\n  if (child.stderr) {\n    child.stderr.destroy();\n  }\n  try {\n    if (process.platform === 'win32') {\n      // kill process tree\n      child_process.execSync(`taskkill /pid ${child.pid} /T /F`);\n    } else {\n      child.kill('SIGKILL');\n    }\n  } catch (ignore) {\n    // ignore\n  }\n};\n\nexport default utils;\n"]}